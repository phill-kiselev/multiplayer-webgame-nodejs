{"version":3,"sources":["constants/index.tsx","components/Scene.tsx","game/routing/routerService.ts","game/Player.ts","game/Rival.ts","game/World.ts","components/Game.tsx","actions/index.ts","thunks/index.ts","components/Lobby.tsx","components/App.tsx","reducers/index.tsx","reducers/gameClientReducer.ts","index.tsx"],"names":["GameStatus","MessageType","Scene","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","scene","engine","canvas","onResizeWindow","resize","React","createRef","nextProps","nextState","BABYLON","current","engineOptions","adaptToDeviceRatio","onSceneMount","console","error","window","addEventListener","removeEventListener","dispose","_this$props","width","height","opts","objectWithoutProperties","undefined","react_default","a","createElement","assign","id","ref","Component","ADD_GAME_CLIENT","REMOVE_GAME_CLIENT","RouterService","client","world","roomId","room","createClass","key","value","joinOrCreate","then","log","setupMessageListeners","catch","e","_this2","state","players","onAdd","player","sessionId","addRival","x","y","onChange","updatePlayer","updateRival","onRemove","removeRival","direction","keyUp","keyDown","keyLeft","keyRight","send","PLAYER_MOVEMENT","LEFT","RIGHT","UP","DOWN","Player","keyFired","camera","mesh","staff","CreateSphere","diameter","CreateCylinder","loadMage","_loadMage","asyncToGenerator","regenerator_default","mark","_callee","assetsManager","meshTask","wrap","_context","prev","next","addMeshTask","onSuccess","task","loadedMeshes","position","parent","lockedTarget","onError","message","exception","load","stop","apply","arguments","Math","PI","activeCamera","attachControl","getEngine","getRenderingCanvas","keyCode","sceneActionManager","forEach","control","registerAction","trigger","OnKeyUpTrigger","parameter","keyUpEvt","OnKeyDownTrigger","keyDownEvt","router","getFacetPosition","subtract","sendMovement","z","normalize","Rival","World","args","rivals","routerService","actionManager","ground","CreateGround","groundMat","diffuseColor","material","checkCollisions","init","setupControls","intensity","impMat","impact","diameterX","diameterY","diameterZ","updatable","onPointerDown","evt","pickResult","hit","pickedPoint","runRenderLoop","render","newRival","rival","update","PageWithScene","run","match","params","connect","associateRouterService","leave","react","className","Scene_Scene","_ref","gameClient","addGameClient","type","constants","Lobby","availableRooms","selectedRoom","checkRoomsInterval","getAvailableRooms","rooms","setState","selectRoom","setInterval","clearInterval","length","map","selected","concat","onClick","react_router_dom","to","pathname","clients","maxClients","renderAvailableRooms","App","connectToGameClient","react_router","path","exact","component","Game","dispatch","gameServerUrl","process","REACT_APP_GAME_SERVER_URL","Colyseus","_x","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.c3db6a6c.chunk.js","sourcesContent":["export const ADD_GAME_CLIENT = 'ADD_GAME_CLIENT';\nexport type ADD_GAME_CLIENT = typeof ADD_GAME_CLIENT;\n\nexport const REMOVE_GAME_CLIENT = 'REMOVE_GAME_CLIENT';\nexport type REMOVE_GAME_CLIENT = typeof REMOVE_GAME_CLIENT;\n\nexport enum GameStatus {\n  ONGOING = 'ong',\n  WIN = 'win',\n  LOSE = 'los',\n  OVER = 'ovr',\n}\n\nexport enum MessageType {\n  PLAYER_MOVEMENT = 'move'\n}\n","import * as BABYLON from 'babylonjs';\nimport React, { Component } from 'react';\n\nexport interface ISceneEventArgs {\n  engine: BABYLON.Engine;\n  scene: BABYLON.Scene;\n  canvas: HTMLCanvasElement | null;\n}\n\nexport interface ISceneProps {\n  engineOptions?: BABYLON.EngineOptions;\n  adaptToDeviceRatio?: boolean;\n  onSceneMount?: (args: ISceneEventArgs) => void;\n  width?: string;\n  height?: string;\n}\n\nexport default class Scene extends Component<\n  ISceneProps & React.HTMLAttributes<HTMLCanvasElement>,\n  {}\n> {\n  private scene: BABYLON.Scene | null;\n  private engine: BABYLON.Engine | null;\n  private canvas: React.RefObject<HTMLCanvasElement>;\n\n  constructor(props: ISceneProps) {\n    super(props);\n    this.scene = null;\n    this.engine = null;\n    this.canvas = React.createRef<HTMLCanvasElement>();\n  }\n\n  onResizeWindow = () => {\n    if (this.engine) {\n      this.engine.resize();\n    }\n  };\n\n  shouldComponentUpdate(nextProps: ISceneProps, nextState: {}) {\n    return false;\n  }\n\n  componentDidMount() {\n    this.engine = new BABYLON.Engine(\n      this.canvas.current,\n      true,\n      this.props.engineOptions,\n      this.props.adaptToDeviceRatio\n    );\n\n    this.scene = new BABYLON.Scene(this.engine);\n\n    if (typeof this.props.onSceneMount === 'function') {\n      this.props.onSceneMount({\n        scene: this.scene,\n        engine: this.engine,\n        canvas: this.canvas.current,\n      });\n    } else {\n      console.error('onSceneMount function not available');\n    }\n\n    // Resize the babylon engine when the window is resized\n    window.addEventListener('resize', this.onResizeWindow);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.onResizeWindow);\n    (this.scene as BABYLON.Scene).dispose();\n    (this.engine as BABYLON.Engine).dispose();\n  }\n\n  render() {\n    // 'rest' can contain additional properties that you can flow through to canvas:\n    // (id, className, etc.)\n    const { width, height, ...rest } = this.props;\n\n    const opts: any = {};\n\n    if (width !== undefined && height !== undefined) {\n      opts.width = width;\n      opts.height = height;\n    }\n\n    return <canvas id=\"renderCanvas\" {...opts} ref={this.canvas} />;\n  }\n}\n","import * as Colyseus from 'colyseus.js';\nimport * as BABYLON from 'babylonjs';\n\nimport { World } from '../World';\n\nimport { MessageType } from '../../constants';\n\nexport class RouterService {\n  client: Colyseus.Client;\n  roomId: string;\n  world: World;\n  room!: Colyseus.Room;\n\n  constructor(client: Colyseus.Client, world: World, roomId: string) {\n    this.client = client;\n    this.roomId = roomId === 'new' ? 'game' : roomId;\n    this.world = world;\n  }\n\n  connect() {\n    //console.log('ROUTER', this.roomId)\n    this.client.joinOrCreate(\"game\").then(room => {\n      this.room = room\n      console.log('client joined successfully');\n      this.setupMessageListeners();\n    }).catch(e => {\n      console.error(\"join error\", e);\n    });\n    // this.room.onJoin.add(() => {\n    //   console.log('client joined successfully');\n    //   this.setupMessageListeners();\n    // });\n  }\n\n  private setupMessageListeners() {\n    this.room.state.players.onAdd = (player: any, key: string) => {\n      //console.log(player, 'player was added');\n      if (key !== this.room.sessionId) {\n        this.world.addRival(key, new BABYLON.Vector3(player.x, 1, player.y));\n      }\n    };\n\n    this.room.state.players.onChange = (player: any, key: string) => {\n      if(key === this.room.sessionId) {\n        this.world.updatePlayer(key, new BABYLON.Vector3(player.x, 1, player.y));\n      } else {\n        this.world.updateRival(key, new BABYLON.Vector3(player.x, 1, player.y));\n      }\n    };\n\n    this.room.state.players.onRemove = (player: any, key: string) => {\n      this.world.removeRival(key);\n    };\n  }\n\n  sendMovement(\n    direction: BABYLON.Vector2,\n    keyUp: boolean,\n    keyDown: boolean,\n    keyLeft: boolean,\n    keyRight: boolean\n  ) {\n    // const keyUp1 = keyUp ? 1 : 0\n    // const keyDown1 = keyDown ? 1 : 0\n    // const keyLeft1 = keyLeft ? 1 : 0\n    // const keyRight1 = keyRight ? 1 : 0\n    // const dir = { x: direction.x, y: direction.y }\n    // console.log({ dir, keyUp1, keyDown1, keyLeft1, keyRight1 })\n    this.room.send(\n      MessageType.PLAYER_MOVEMENT,\n      { direction, keyUp, keyDown, keyLeft, keyRight },\n    );\n  }\n}\n","import * as BABYLON from 'babylonjs';\nimport { RouterService } from './routing/routerService';\n\nexport const LEFT: [number, string] = [65, 'a'];\nexport const RIGHT: [number, string] = [68, 'd'];\nexport const UP: [number, string] = [87, 'w'];\nexport const DOWN: [number, string] = [83, 's'];\n\nexport class Player {\n  private scene: BABYLON.Scene;\n  private keyDown: any = {};\n  private keyFired: any = {};\n  //speed: number = 0.3;\n  camera!: BABYLON.ArcRotateCamera;\n  mesh: BABYLON.AbstractMesh;\n  staff: BABYLON.AbstractMesh;\n\n  constructor(scene: BABYLON.Scene) {\n    this.scene = scene;\n    this.mesh = BABYLON.MeshBuilder.CreateSphere(\"im\", {diameter: 0.2}, this.scene); \n    this.staff = BABYLON.MeshBuilder.CreateSphere(\"mystaff\", {diameter: 0.2}, this.scene);\n    const trig = BABYLON.MeshBuilder.CreateCylinder('collider', { diameter: 0.8, height: 1.4 }, this.scene);\n    this.loadMage()\n  }\n\n  async loadMage() {\n    var assetsManager = new BABYLON.AssetsManager(this.scene);\n    var meshTask = assetsManager.addMeshTask(\"Mage\", \"\", \"/assets/\", \"Mages_1to4_babylon.babylon\");\n    //BABYLON.SceneLoader.ImportMesh(\"\", \"../models/\", \"Mages_1to4_babylon.babylon\", scene, function (newMeshes, particleSystems, skeletons) {\n    meshTask.onSuccess = (task) => {\n      console.log(\"Loading Mage successed!\")\n      //task.loadedMeshes[0].position = new BABYLON.Vector3(0,4,0);\n      task.loadedMeshes[5].position = this.mesh.position;\n      //task.loadedMeshes[0].dispose();\n      task.loadedMeshes[1].dispose();\n      task.loadedMeshes[2].dispose();\n      task.loadedMeshes[3].dispose();\n      task.loadedMeshes[4].dispose();\n      //task.loadedMeshes[5].dispose();\n      task.loadedMeshes[6].dispose();\n      task.loadedMeshes[7].dispose();\n      this.staff.dispose();\n      this.mesh.dispose();\n      this.staff = task.loadedMeshes[0];\n      this.mesh = task.loadedMeshes[5];\n      this.staff.parent = this.mesh;\n      this.camera.lockedTarget = this.mesh;\n    }\n    meshTask.onError = function (task, message, exception) {\n        console.log(message, exception);\n    }\n    assetsManager.load();\n  }\n\n  init(position: BABYLON.Vector3) {\n    this.camera = new BABYLON.ArcRotateCamera(\"Camera\", Math.PI / 4, Math.PI / 5, 15, new BABYLON.Vector3(0,0,1), this.scene);\n    //this.camera.speed = this.speed;\n    //this.camera.applyGravity = true;\n    //this.camera.ellipsoid = new BABYLON.Vector3(1, 0.75, 1);\n    //this.camera.checkCollisions = true;\n    //this.camera.keysUp = [UP[0]]; // w\n    //this.camera.keysDown = [DOWN[0]]; // S\n    //this.camera.keysLeft = [LEFT[0]]; // A\n    //this.camera.keysRight = [RIGHT[0]]; // D\n    //this.camera.setTarget(BABYLON.Vector3.Zero());\n    this.camera.lockedTarget = this.mesh;\n    //this.mesh.parent = this.camera;\n    this.scene.activeCamera = this.camera;\n\n    // This attaches the camera to the canvas\n    this.camera.attachControl(\n      this.scene.getEngine().getRenderingCanvas() as HTMLCanvasElement,\n      true\n    );\n  }\n\n  private keyDownEvt(keyCode: number) {\n    if (!this.keyFired[keyCode]) {\n      this.keyDown[keyCode] = true;\n      this.keyFired[keyCode] = true;\n    }\n  }\n\n  private keyUpEvt(keyCode: number) {\n    this.keyDown[keyCode] = false;\n    this.keyFired[keyCode] = false;\n  }\n\n  setupControls(sceneActionManager: BABYLON.ActionManager) {\n    [LEFT, RIGHT, UP, DOWN].forEach((control: [number, string]) => {\n      sceneActionManager.registerAction(\n        new BABYLON.ExecuteCodeAction(\n          {\n            trigger: BABYLON.ActionManager.OnKeyUpTrigger,\n            parameter: control[1],\n          },\n          () => this.keyUpEvt(control[0])\n        )\n      );\n      sceneActionManager.registerAction(\n        new BABYLON.ExecuteCodeAction(\n          {\n            trigger: BABYLON.ActionManager.OnKeyDownTrigger,\n            parameter: control[1],\n          },\n          () => this.keyDownEvt(control[0])\n        )\n      );\n    });\n  }\n\n  sendMovement(router: RouterService) {\n    if (\n      this.keyDown[UP[0]] ||\n      this.keyDown[DOWN[0]] ||\n      this.keyDown[LEFT[0]] ||\n      this.keyDown[RIGHT[0]]\n    ) {\n      const direction: BABYLON.Vector3 = this.mesh\n        .getFacetPosition(1)\n        .subtract(this.mesh.position);\n      router.sendMovement(\n        new BABYLON.Vector2(direction.x, direction.z).normalize(),\n        this.keyDown[UP[0]],\n        this.keyDown[DOWN[0]],\n        this.keyDown[LEFT[0]],\n        this.keyDown[RIGHT[0]]\n      );\n    }\n  }\n\n  update(position: BABYLON.Vector3) {\n    this.mesh.position.x = position.x;\n    this.mesh.position.z = position.z;\n  }\n}\n","import * as BABYLON from 'babylonjs';\n//import mage from './assets/Mages_1to4_babylon.babylon';\n\nexport class Rival {\n  private scene: BABYLON.Scene;\n  id: string;\n  mesh: BABYLON.AbstractMesh;\n  staff: BABYLON.AbstractMesh;\n\n  async loadMage() {\n    var assetsManager = new BABYLON.AssetsManager(this.scene);\n    var meshTask = assetsManager.addMeshTask(\"Mage\", \"\", \"/assets/\", \"Mages_1to4_babylon.babylon\");\n    //BABYLON.SceneLoader.ImportMesh(\"\", \"../models/\", \"Mages_1to4_babylon.babylon\", scene, function (newMeshes, particleSystems, skeletons) {\n    meshTask.onSuccess = (task) => {\n      console.log(\"Loading Mage successed!\")\n      //task.loadedMeshes[0].position = new BABYLON.Vector3(2,4,2);\n      task.loadedMeshes[5].position = this.mesh.position;\n      //task.loadedMeshes[0].dispose();\n      task.loadedMeshes[1].dispose();\n      task.loadedMeshes[2].dispose();\n      task.loadedMeshes[3].dispose();\n      task.loadedMeshes[4].dispose();\n      //task.loadedMeshes[5].dispose();\n      task.loadedMeshes[6].dispose();\n      task.loadedMeshes[7].dispose();\n      this.staff.dispose();\n      this.mesh.dispose();\n      this.staff = task.loadedMeshes[0];\n      this.mesh = task.loadedMeshes[5];\n      //this.mesh.position = new BABYLON.Vector3(0,2,0);\n      this.staff.parent = this.mesh;\n    }\n    meshTask.onError = function (task, message, exception) {\n        console.log(message, exception);\n    }\n    assetsManager.load();\n  }\n\n  constructor(scene: BABYLON.Scene, id: string) {\n    this.scene = scene;\n    this.id = id;\n    this.mesh = BABYLON.MeshBuilder.CreateSphere(id, {diameter: 0.2}, this.scene);\n    this.staff = BABYLON.MeshBuilder.CreateSphere(id, {diameter: 0.2}, this.scene);\n    this.loadMage()\n  }\n\n  init(position: BABYLON.Vector3) {\n    this.mesh.position = position;\n  }\n\n  update(position: BABYLON.Vector3) {\n    this.mesh.position = position;\n  }\n}\n","import * as BABYLON from 'babylonjs';\n\nimport { Player } from './Player';\nimport { Rival } from './Rival';\n\nimport { ISceneEventArgs } from '../components/Scene';\nimport { RouterService } from './routing/routerService';\n\nexport class World {\n  private canvas: HTMLCanvasElement;\n  private engine: BABYLON.Engine;\n  private scene: BABYLON.Scene;\n\n  player!: Player;\n  private rivals: { [id: string]: Rival } = {};\n  private routerService!: RouterService\n\n  constructor(args: ISceneEventArgs) {\n    this.canvas = args.canvas as HTMLCanvasElement\n    this.engine = args.engine\n    this.scene = args.scene\n  }\n\n  run() {\n    this.scene.actionManager = new BABYLON.ActionManager(this.scene);\n\n    const ground = BABYLON.MeshBuilder.CreateGround(\"ground\", {width: 100, height: 100}, this.scene);\n    const groundMat = new BABYLON.StandardMaterial(\"groundMat\", this.scene);\n    groundMat.diffuseColor = new BABYLON.Color3(0.2, 0.2, 0.5);\n    ground.material = groundMat;\n    ground.checkCollisions = true;\n\n    this.player = new Player(this.scene);\n    this.player.init(new BABYLON.Vector3(0, 1, 0));\n    this.player.setupControls(this.scene.actionManager as BABYLON.ActionManager)\n\n    const light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 1, 0), this.scene);\n    light.intensity = 0.7;\n\n    var impMat = new BABYLON.StandardMaterial(\"impMat\", this.scene);\n    impMat.diffuseColor = new BABYLON.Color3(0, 0, 0);\n    var impact = BABYLON.MeshBuilder.CreateSphere(\"sphere\", {diameter: 0, diameterX: 0.15*2, diameterY: 0.01, diameterZ: 0.15*2, updatable: true}, this.scene);\n    impact.material = impMat;\n\n    this.scene.onPointerDown = (evt, pickResult) => {\n        //console.log(pickResult)\n        if (pickResult.hit) {\n          impact.position.x = (pickResult.pickedPoint as BABYLON.Vector3).x;\n          impact.position.z = (pickResult.pickedPoint as BABYLON.Vector3).z;\n          impact.position.y = (pickResult.pickedPoint as BABYLON.Vector3).y;\n        }\n      }\n\n\n    this.engine.runRenderLoop(() => {\n        if(this.player && this.routerService) {\n          this.player.sendMovement(this.routerService);\n        }\n        if (this.scene) {\n            this.scene.render();\n        }\n    });\n  }\n\n  associateRouterService(routerService: RouterService) {\n    this.routerService = routerService;\n  }\n\n  addRival(key: string, position: BABYLON.Vector3) {\n    const newRival = new Rival(this.scene, key);\n    newRival.init(position);\n    this.rivals[key] = newRival;\n  }\n\n  removeRival(key: string) {\n    const rival = this.rivals[key];\n    if (rival) {\n      rival.mesh.dispose();\n      delete this.rivals[key];\n    }\n  }\n\n  updateRival(key: string, position: BABYLON.Vector3) {\n    this.rivals[key].update(position);\n  }\n\n  updatePlayer(key: string, position: BABYLON.Vector3) {\n    this.player.update(position);\n  }\n}\n","import * as React from 'react';\nimport * as Colyseus from 'colyseus.js';\nimport { connect } from 'react-redux';\n\nimport BabylonScene, { ISceneEventArgs } from './Scene';\nimport { RouterService } from '../game/routing/routerService';\nimport { World } from '../game/World';\nimport { IRootState } from '../types';\n\nexport interface IGameProps {\n  client: Colyseus.Client | null;\n  match: { params: { roomId: string } };\n}\n\nclass PageWithScene extends React.Component<IGameProps> {\n\n  private world!: World;\n  private routerService!: RouterService\n\n  onSceneMount = (args: ISceneEventArgs) => {\n    this.world = new World(args);\n    this.world.run();\n    //console.log(this.props.match.params.roomId)\n    this.routerService = new RouterService(\n      this.props.client as Colyseus.Client,\n      this.world,\n      this.props.match.params.roomId\n    );\n    this.routerService.connect();\n    //console.log(this.props.match.params.roomId)\n    this.world.associateRouterService(this.routerService);\n  };\n\n  componentWillUnmount() {\n    this.routerService.room.leave();\n  }\n\n  render() {\n    return (\n      <div className=\"game-wrapper\">\n        <BabylonScene\n          onSceneMount={this.onSceneMount}\n          adaptToDeviceRatio={true}\n          // height={'600'}\n          // width={'1200'}\n        />\n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = ({ gameClient }: IRootState) => {\n  return {\n    client: gameClient.client,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PageWithScene);\n","import { Action } from 'redux';\nimport * as constants from '../constants';\nimport * as Colyseus from 'colyseus.js';\n\nexport type IActions =\n  | IAddGameClient\n  | IRemoveGameClient\n\nexport interface IAddGameClient extends Action {\n  type: constants.ADD_GAME_CLIENT;\n  client: Colyseus.Client;\n}\n\nexport interface IRemoveGameClient extends Action {\n  type: constants.REMOVE_GAME_CLIENT;\n  //room: Colyseus.Room;\n}\n\nexport function addGameClient(client: Colyseus.Client): IAddGameClient {\n  return {\n    type: constants.ADD_GAME_CLIENT,\n    client,\n  };\n}\n\nexport function removeGameClient(): IRemoveGameClient {\n  return {\n    type: constants.REMOVE_GAME_CLIENT,\n    //room: Colyseus.Room,\n  };\n}\n","import * as Colyseus from 'colyseus.js';\nimport { addGameClient } from '../actions';\nimport { Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { IRootState } from '../types';\nimport { IActions } from '../actions';\n\nexport type ThunkResult<R> = ThunkAction<R, IRootState, undefined, IActions>;\n\nexport const connectToGameClient = (): ThunkResult<void> => {\n  return async (dispatch: Dispatch) => {\n    const gameServerUrl = process.env.NODE_ENV === 'development' ? 'ws://localhost:4000' : process.env.REACT_APP_GAME_SERVER_URL;\n    const client = new Colyseus.Client(gameServerUrl as string);\n    await dispatch(addGameClient(client));\n  };\n};\n","import React, { Component } from 'react';\nimport { Client } from 'colyseus.js';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { IRootState } from '../types';\n\nexport interface ILobbyProps {\n  client: Client | null;\n}\n\nclass Lobby extends Component<ILobbyProps> {\n  state = { availableRooms: [],  selectedRoom: undefined };\n\n  private checkRoomsInterval!: NodeJS.Timeout;\n\n  componentDidMount() {\n    this.checkRoomsInterval = setInterval(this.getAvailableRooms, 3000);\n    this.getAvailableRooms();\n  }\n\n  getAvailableRooms = () => {\n    if (this.props.client) {\n      (this.props.client as Client).getAvailableRooms('game').then(rooms => {\n        //console.log(\"ROOMS\", rooms)\n        if (rooms) {\n          this.setState({ availableRooms: rooms });\n        }\n      });\n    }\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.checkRoomsInterval);\n  }\n\n  selectRoom = (roomId: string) => {\n    this.setState({ selectedRoom: roomId });\n  };\n\n  renderAvailableRooms() {\n    const rooms = this.state.availableRooms;\n    if (rooms.length === 0) {\n      return <div className=\"item\">It seems no one is playing at the moment.</div>;\n    }\n    return rooms.map((room: any) => {\n      const selected = room.roomId === this.state.selectedRoom;\n      return (\n        <div\n          className={`item${selected ? ' selected' : ''}`}\n          key={room.roomId}\n          onClick={() => this.selectRoom(room.roomId)}\n        >\n          {selected && (\n            <div className=\"right floated content\">\n              <Link to={{ pathname: `/game/${room.roomId}`}}>\n                <div className=\"ui primary button\">Join</div>\n              </Link>\n            </div>\n          )}\n          <div className=\"content\">\n            <div className=\"header\">{room.roomId}</div>\n            <div className=\"description\">\n              {room.clients}/{room.maxClients}\n            </div>\n          </div>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <div className=\"ui raised segment\">\n          <h3 className=\"ui header\">\n            <i className=\"circular inverted users icon\" />\n            <div className=\"content\">\n              Available rooms\n              <div className=\"sub header\">Choose one to join</div>\n            </div>\n          </h3>\n          <div className=\"ui divided list\">{this.renderAvailableRooms()}</div>\n          <Link to={{ pathname: '/game/new'}}>\n            <div className=\"ui primary button\">Create new room</div>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n//<Link to={{ pathname: '/game/new'}}>\n//  <div className=\"ui primary button\">Create new room</div>\n//</Link>\n\nconst mapStateToProps = ({ gameClient }: IRootState) => {\n  return {\n    client: gameClient.client,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Lobby);\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as Colyseus from 'colyseus.js';\n\nimport { IRootState } from '../types';\nimport Game from './Game';\nimport { connectToGameClient } from '../thunks';\nimport Lobby from './Lobby';\n\nimport './App.scss';\n\ninterface IAppProps {\n  connectToGameClient: () => void;\n  client: Colyseus.Client | null,\n}\n\nclass App extends Component<IAppProps> {\n  componentDidMount() {\n    this.props.connectToGameClient();\n  }\n\n  render() {\n    if(!this.props.client) {\n      return null;\n    }\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <div className=\"router-wrapper\">\n            <Switch>\n              <Route\n                path=\"/\"\n                exact={true}\n                component={Lobby}\n              />\n              <Route\n                path=\"/game/:roomId\"\n                exact={true}\n                component={Game}\n              />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ gameClient }: IRootState) => {\n  return {\n    client: gameClient.client,\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { connectToGameClient, }\n)(App);\n","import { combineReducers } from 'redux';\nimport { gameClient } from './gameClientReducer';\n\nexport default combineReducers({\n  gameClient,\n});\n","import { IActions } from '../actions';\nimport { IClientState } from '../types/index';\nimport { ADD_GAME_CLIENT, REMOVE_GAME_CLIENT } from '../constants/index';\nimport { Reducer } from 'redux';\n\nexport const gameClient: Reducer<IClientState, IActions> = (state = { client: null }, action) => {\n  switch (action.type) {\n    case ADD_GAME_CLIENT:\n      return { client: action.client };\n    case REMOVE_GAME_CLIENT:\n      if (state.client) {\n        //state.room.leave();\n      }\n      return { client: null };\n  }\n  return state;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reduxThunk, { ThunkMiddleware } from 'redux-thunk';\n\nimport App from './components/App';\nimport reducers from './reducers';\nimport { IRootState } from './types';\nimport { IActions } from './actions';\n\nconst windowIfDefined = typeof window === 'undefined' ? null : (window as any);\nconst composeEnhancers = windowIfDefined.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore<IRootState, IActions, {}, {}>(\n  reducers,\n  composeEnhancers(applyMiddleware(reduxThunk as ThunkMiddleware<IRootState, IActions>))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root') as HTMLElement\n);\n\n\n// \"colyseus.js\": \"^0.10.6\",\n"],"sourceRoot":""}